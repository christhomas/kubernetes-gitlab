apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-ci
  namespace: gitlab
---

# -- Create the permissions the ingress needs control over
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: gitlab-ci
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create","read","delete"]
  - apiGroups: [""]
    resources: ["pods","pods/exec"]
    verbs: ["create","get","update","delete","list"]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles"]
    verbs: ["*"]
---

# -- Bind the permissions onto the service account
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: gitlab-ci
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gitlab-ci
subjects:
- kind: ServiceAccount
  name: gitlab-ci
  namespace: gitlab
---

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: gitlab
  namespace: gitlab
  labels:
    app: gitlab
spec:
  serviceName: gitlab
  replicas: 1
  volumeClaimTemplates:
    - metadata:
        name: gitlab-data
        namespace: gitlab
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 50Gi
        selector:
          matchLabels:
            volume-name: gitlab-data
    - metadata:
        name: gitlab-postgres
        namespace: gitlab
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
        selector:
          matchLabels:
            volume-name: gitlab-postgres
    - metadata:
        name: gitlab-docker-registry
        namespace: gitlab
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 25Gi
        selector:
          matchLabels:
            volume-name: gitlab-docker-registry
  template:
    metadata:
      labels:
        app: gitlab
    spec:
      initContainers:
        - name: registry-certs
          image: alpine:latest
          envFrom:
            - configMapRef:
                name: registry-cert-data
          command:
            - sh
            - "-c"
            - |
              apk --no-cache add openssl
              openssl req -nodes -new -x509 \
                      -keyout /certs/registry.key \
                      -out /certs/registry.crt \
                      -subj "/C=${CERT_CREATE_COUNTRY}/ST=${CERT_CREATE_STATE}/L=${CERT_CREATE_CITY}/O=${CERT_CREATE_ORGANISATION}/OU=${CERT_CREATE_ORGANISATIONAL_UNIT}/CN=${CERT_CREATE_FQDN}/emailAddress=${CERT_CREATE_EMAIL}"
          volumeMounts:
            - name: certs
              mountPath: /certs
      containers:
        - name: gitlab
          image: sameersbn/gitlab:10.7.2
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: gitlab-cm
            - configMapRef:
                name: postgres-cm
            - secretRef:
                name: gitlab-secret
            - secretRef:
                name: postgres-secret
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: 22
              name: ssh
              protocol: TCP
          resources:
            limits:
              cpu: "1000m"
              memory: 4Gi
            requests:
              cpu: "250m"
              memory: 500Mi
          volumeMounts:
            - name: gitlab-data
              mountPath: /home/git/data
            - name: certs
              mountPath: /certs
        - name: postgresql
          image: sameersbn/postgresql:9.6-2
          envFrom:
            - configMapRef:
                name: postgres-cm
            - secretRef:
                name: postgres-secret
          env:
            - name: DB_EXTENSION
              value: pg_trgm
          ports:
            - name: postgres
              containerPort: 5432
          volumeMounts:
            - name: gitlab-postgres
              mountPath: /var/lib/postgresql
          livenessProbe:
            exec:
              command: ["pg_isready","-h","localhost","-U","postgres"]
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: ["pg_isready","-h","localhost","-U","postgres"]
            initialDelaySeconds: 5
            timeoutSeconds: 1
        - name: redis
          image: sameersbn/redis
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            exec:
              command: ["redis-cli","ping"]
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: ["redis-cli","ping"]
            initialDelaySeconds: 5
            timeoutSeconds: 1
        - name: registry
          image: registry:latest
          envFrom:
            - configMapRef:
                name: registry-cm
            - secretRef:
                name: registry-secret
          ports:
            - name: registry
              containerPort: 5000
          volumeMounts:
            - name: gitlab-docker-registry
              mountPath: /registry
            - name: certs
              mountPath: /certs
      volumes:
        - name: certs
          emptyDir: {}

---

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: gitlab-ci-runner
  namespace: gitlab
  labels:
    app: gitlab-ci-runner
spec:
  updateStrategy:
    type: RollingUpdate
  replicas: 1
  serviceName: gitlab-ci-runner
  template:
    metadata:
      labels:
        app: gitlab-ci-runner
    spec:
# These rules appear to tell kubernetes to schedule each pod on different nodes
#      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            - topologyKey: "kubernetes.io/hostname"
#              labelSelector:
#                matchExpressions:
#                  - key: app
#                    operator: In
#                    values:
#                      - gitlab-ci-runner
      volumes:
        - name: gitlab-ci-runner-scripts
          projected:
            sources:
              - configMap:
                  name: gitlab-ci-runner-scripts
                  items:
                    - key: run.sh
                      path: run.sh
                      mode: 0755
      serviceAccountName: gitlab-ci
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        supplementalGroups: [999]
      containers:
        - image: gitlab/gitlab-runner:v10.7.1
          name: gitlab-ci-runner
          command:
            - /scripts/run.sh
          envFrom:
            - configMapRef:
                name: gitlab-ci-runner-cm
            - secretRef:
                name: gitlab-ci-token
          env:
            - name: RUNNER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - containerPort: 9100
              name: http-metrics
              protocol: TCP
          volumeMounts:
            - name: gitlab-ci-runner-scripts
              mountPath: "/scripts"
              readOnly: true
      restartPolicy: Always
---

# -- Service for the Ingress to target
apiVersion: v1
kind: Service
metadata:
  name: gitlab
  namespace: gitlab
spec:
  selector:
    app: gitlab
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: ssh
      port: 10022
      targetPort: 22
    - name: registry
      port: 5000
      targetPort: 5000

---

# -- Ingress configuration for Gitlab
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gitlab
  namespace: gitlab
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 2000m
spec:
  tls:
    - secretName: tls-gitlab-antimatter-studios-com
      hosts:
        - "gitlab.antimatter-studios.com"
    - secretName: tls-registry-gitlab-antimatter-studios-com
      hosts:
        - "registry.gitlab.antimatter-studios.com"
  rules:
    - host: gitlab.antimatter-studios.com
      http:
        paths:
          - backend:
              serviceName: gitlab
              servicePort: 80
    - host: registry.gitlab.antimatter-studios.com
      http:
        paths:
          - backend:
              serviceName: gitlab
              servicePort: 5000
